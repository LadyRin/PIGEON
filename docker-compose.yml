services:
  djangoapp:
    container_name: pigeonapp_django
    build:
      context: ./backend
      dockerfile: django.Dockerfile
    ports:
      - "3000:8000"
    env_file:
      - .env
    volumes:
      - ./backend:/app
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      db:
        condition: service_healthy

  celery_worker:
    container_name: pigeonapp_celery_worker
    build:
      context: ./backend
      dockerfile: celery.Dockerfile
    env_file:
      - .env
    volumes:
      - ./backend:/app
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  celery_beat:
    container_name: pigeonapp_celery_beat
    build:
      context: ./backend
      dockerfile: celerybeat.Dockerfile
    env_file:
      - .env
    volumes:
      - ./backend:/app
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  db:
    container_name: pigeonapp_db
    image: postgres:12
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 10s
      retries: 5
    env_file:
      - .env
    environment:
      PGUSER: ${POSTGRES_USER}
    ports:
      - "8432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data

  rabbitmq:
    container_name: pigeonapp_rabbitmq
    image: rabbitmq:3-management
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl node_health_check"]
      interval: 10s
      timeout: 10s
      retries: 5
    env_file:
      - .env

  web:
    container_name: pigeonapp_web
    build:
      context: ./frontend
      dockerfile: frontend.Dockerfile
    ports:
      - "3001:80"

volumes:
  pgdata: {}
